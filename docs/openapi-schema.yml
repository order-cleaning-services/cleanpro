openapi: 3.0.2
info:
  title: 'Cleanpro'
  version: ''
paths:
  /users/:
    get:
      operationId: Список пользователей
      description: 'Доступно только для администратора'
      security:
        - bearerAuth: []
      x-role: admin
      parameters:
        - name: page
          required: false
          in: query
          description: Номер страницы.
          schema:
            type: integer
        - name: limit
          required: false
          in: query
          description: Количество объектов на странице.
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                    description: 'Общее количество объектов в базе'
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://foodgram.example.org/users/?page=4
                    description: 'Ссылка на следующую страницу'
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://foodgram.example.org/users/?page=2
                    description: 'Ссылка на предыдущую страницу'
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    description: 'Список объектов текущей страницы'
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/PermissionDenied'
      tags:
        - Пользователи
    post:
      operationId: Регистрация пользователя
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserResponseOnCreate'
          description: 'Пользователь успешно создан'
        '400':
          $ref: '#/components/responses/ValidationError'
      tags:
        - Пользователи
  /users/generate_password/:
    post:
      operationId: Регистрация пользователя без пароля
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserCreateWithoutPassword'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserResponseOnCreate'
          description: 'Пользователь успешно создан'
        '400':
          $ref: '#/components/responses/ValidationError'
      tags:
        - Пользователи
  /users/{id}/:
    get:
      operationId: Профиль пользователя
      description: 'Доступно только для администратора'
      security:
        - bearerAuth: []
      x-role: admin
      parameters:
        - name: id
          in: path
          required: true
          description: 'Уникальный id этого пользователя'
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '403':
          $ref: '#/components/responses/PermissionDenied'
      tags:
        - Пользователи
  /users/me/:
    get:
      operationId: Текущий пользователь
      description: ''
      parameters: []
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи
  /users/set_password/:
    post:
      operationId: Изменение пароля
      description: 'Изменение пароля текущего пользователя'
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
      responses:
        '204':
          description: 'Пароль успешно изменен'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи
  /auth/token/login/:
    post:
      operationId: Получить токен авторизации
      description: Используется для авторизации по емейлу и паролю, чтобы далее использовать токен при запросах.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenGetResponse'
          description: ''
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Пользователи
  /auth/token/logout/:
    post:
      operationId: Удаление токена
      description: Удаляет токен текущего пользователя
      security:
        - bearerAuth: []
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}

      responses:
        '204':
          content:
            application/json:
              schema: {}
          description: ''
        '401':
          $ref: '#/components/responses/AuthenticationError'
      tags:
        - Пользователи

components:
  schemas:
    User:
      description:  'Заказчик'
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: 'id пользователя'
          example: 1
        email:
          type: string
          format: email
          maxLength: 255
          description: 'Адрес электронной почты'
        first_name:
          type: string
          maxLength: 150
          description: 'Имя'
          example: 'Вася'
        phone:
          type: string
          pattern: '^(?:\+7|8){10}$'
          description: 'Номер телефона'
          example: '89118277312'
        city:
          type: string
          maxLength: 150
          description: 'Город'
          example: 'Москва'
        street:
          type: string
          maxLength: 150
          description: 'Улица'
          example: 'Ворошилова'
        house:
          type: integer
          description: 'Дом'
          example: 31
        apartment:
          type: integer
          description: 'Квартира'
          example: 90
    CustomUserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        email:
          type: string
          format: email
          maxLength: 255
          description: 'Адрес электронной почты'
        first_name:
          type: string
          maxLength: 150
          description: 'Имя'
          example: 'Вася'
        phone:
          type: string
          pattern: '^(?:\+7|8){10}$'
          description: 'Номер телефона'
          example: '89118277312'
        city:
          type: string
          maxLength: 150
          description: 'Город'
          example: 'Москва'
        street:
          type: string
          maxLength: 150
          description: 'Улица'
          example: 'Ворошилова'
        house:
          type: integer
          description: 'Дом'
          example: 31
        apartment:
          type: integer
          description: 'Квартира'
          example: 90
        password:
          type: string
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z\d]).{8,16}$
          maxLength: 16
          description: 'Пароль'
          example: 'Qwerty_123'
      required:
        - email
        - password
    CustomUserCreateWithoutPassword:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        email:
          type: string
          format: email
          maxLength: 255
          description: 'Адрес электронной почты'
        first_name:
          type: string
          maxLength: 150
          description: 'Имя'
          example: 'Вася'
        phone:
          type: string
          pattern: '^(?:\+7|8){10}$'
          description: 'Номер телефона'
          example: '89118277312'
        city:
          type: string
          maxLength: 150
          description: 'Город'
          example: 'Москва'
        street:
          type: string
          maxLength: 150
          description: 'Улица'
          example: 'Ворошилова'
        house:
          type: integer
          description: 'Дом'
          example: 31
        apartment:
          type: integer
          description: 'Квартира'
          example: 90
      required:
        - email
        - first_name
        - phone
        - city
        - street
        - house
    CustomUserResponseOnCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: 'id пользователя'
          example: 1
        email:
          type: string
          format: email
          maxLength: 255
          description: 'Адрес электронной почты'
          example: 'vpupkin@yandex.ru'
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z\d]).{8,16}$
          maxLength: 16
          description: 'Новый пароль'
          example: 'Qwerty_124'
        current_password:
          type: string
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z\d]).{8,16}$
          maxLength: 16
          description: 'Текущий пароль'
          example: 'Qwerty_123'
      required:
        - new_password
        - current_password
    TokenCreate:
      type: object
      properties:
        password:
          type: string
          pattern: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z\d]).{8,16}$
          maxLength: 16
          description: 'Текущий пароль'
          example: 'Qwerty_123'
        email:
          type: string
          format: email
          maxLength: 255
          description: 'Адрес электронной почты'
          example: 'vpupkin@yandex.ru'
    TokenGetResponse:
      type: object
      properties:
        auth_token:
          type: string
          description: 'Токен'

    ValidationError:
      description: Стандартные ошибки валидации DRF
      type: object
      properties:
        field_name:
          description: 'Название поля, в котором произошли ошибки. Таких полей может быть несколько'
          example: [ 'Обязательное поле.' ]
          type: array
          items:
            type: string
    AuthenticationError:
      description: Пользователь не авторизован
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: 'Учетные данные не были предоставлены.'
          type: string

    PermissionDenied:
      description: Недостаточно прав
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: 'У вас недостаточно прав для выполнения данного действия.'
          type: string
    NotFound:
      description: Объект не найден
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: 'Страница не найдена.'
          type: string

  responses:
    ValidationError:
      description: 'Ошибки валидации в стандартном формате DRF'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
    NestedValidationError:
      description: 'Ошибки валидации в стандартном формате DRF, в том числе с внутренними элементами.'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/NestedValidationError'
              - $ref: '#/components/schemas/ValidationError'

    AuthenticationError:
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'

    PermissionDenied:
      description: Недостаточно прав
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PermissionDenied'

    NotFound:
      description: Объект не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'

  securitySchemes:
    bearerAuth:
      description: 'Авторизация по токену'
      type: http
      scheme: bearer
      bearerFormat: JWT